package fr.formation.inti.entities;
// Generated 15 janv. 2020 16:53:54 by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "adopt_a_pet")
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	private Integer iduser;
	private Departement departement;
	private Pet pet;
	private Title title;
	private String username;
	private String password;
	private Date dateCreation;
	private Date dateFermeture;
	private Set<Transfert> transfertsForNewIdUser = new HashSet<Transfert>(0);
	private Set<Pet> pets = new HashSet<Pet>(0);
	private Individual individuals;
	private Set<Transfert> transfertsForIduser = new HashSet<Transfert>(0);
	private Set<Adoption> adoptions = new HashSet<Adoption>(0);
	private Centre centres;
	private Set<Historique> historiques = new HashSet<Historique>(0);

	public User() {
	}

	public User(Departement departement, Title title, String username, String password) {
		this.departement = departement;
		this.title = title;
		this.username = username;
		this.password = password;
	}

	public User(Departement departement, Pet pet, Title title, String username, String password, Date dateCreation,
			Date dateFermeture, Set<Transfert> transfertsForNewIdUser, Set<Pet> pets, Individual individuals,
			Set<Transfert> transfertsForIduser, Set<Adoption> adoptions, Centre centres,
			Set<Historique> historiques) {
		this.departement = departement;
		this.pet = pet;
		this.title = title;
		this.username = username;
		this.password = password;
		this.dateCreation = dateCreation;
		this.dateFermeture = dateFermeture;
		this.transfertsForNewIdUser = transfertsForNewIdUser;
		this.pets = pets;
		this.individuals = individuals;
		this.transfertsForIduser = transfertsForIduser;
		this.adoptions = adoptions;
		this.centres = centres;
		this.historiques = historiques;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "iduser", unique = true, nullable = false)
	public Integer getIduser() {
		return this.iduser;
	}

	public void setIduser(Integer iduser) {
		this.iduser = iduser;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deptid", nullable = false)
	public Departement getDepartement() {
		return this.departement;
	}

	public void setDepartement(Departement departement) {
		this.departement = departement;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idpet")
	public Pet getPet() {
		return this.pet;
	}

	public void setPet(Pet pet) {
		this.pet = pet;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idtitle", nullable = false)
	public Title getTitle() {
		return this.title;
	}

	public void setTitle(Title title) {
		this.title = title;
	}

	@Column(name = "username", nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_creation", length = 19)
	public Date getDateCreation() {
		return this.dateCreation;
	}

	public void setDateCreation(Date dateCreation) {
		this.dateCreation = dateCreation;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_fermeture", length = 19)
	public Date getDateFermeture() {
		return this.dateFermeture;
	}

	public void setDateFermeture(Date dateFermeture) {
		this.dateFermeture = dateFermeture;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByNewIdUser")
	public Set<Transfert> getTransfertsForNewIdUser() {
		return this.transfertsForNewIdUser;
	}

	public void setTransfertsForNewIdUser(Set<Transfert> transfertsForNewIdUser) {
		this.transfertsForNewIdUser = transfertsForNewIdUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Pet> getPets() {
		return this.pets;
	}

	public void setPets(Set<Pet> pets) {
		this.pets = pets;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@Column(name = "individual")
	public Individual getIndividuals() {
		return this.individuals;
	}

	public void setIndividuals(Individual individuals) {
		this.individuals = individuals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByIduser")
	public Set<Transfert> getTransfertsForIduser() {
		return this.transfertsForIduser;
	}

	public void setTransfertsForIduser(Set<Transfert> transfertsForIduser) {
		this.transfertsForIduser = transfertsForIduser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Adoption> getAdoptions() {
		return this.adoptions;
	}

	public void setAdoptions(Set<Adoption> adoptions) {
		this.adoptions = adoptions;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@Column(name = "centre")
	public Centre getCentres() {
		return this.centres;
	}

	public void setCentres(Centre centres) {
		this.centres = centres;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Historique> getHistoriques() {
		return this.historiques;
	}

	public void setHistoriques(Set<Historique> historiques) {
		this.historiques = historiques;
	}

}
